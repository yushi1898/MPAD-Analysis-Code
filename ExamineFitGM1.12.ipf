#pragma rtGlobals=1		// Use modern global access method.// *************MODIFICATION HISTORY  - EFFECTIVE MAY 19, 2006//   5/14/14  update with bandpass filter for examine//   5/31/06  converted to Gfit from LUTfit//5/29/06 // ExamineFitLUT1post1image()// Minor bug fix - error generation removed if not making Notebook //static strconstant  ksRhodFileRoot = "RHOD"  // for 2-digit namesstatic strconstant  ksRhodFileRoot = "RHOD"  // for 3-digit names// maskwave constantsstatic constant kEmpty = 0static constant kCell = 1static constant kGuide = 2static constant kIgnore = 3static constant kWirepost = 4static constant kFitAll = -1static constant kInterp = 5     // 5/24/06  new constant interp base fit// indices for fitparams   5/31/06static constant kNfitParamsG  = 8  // includes column for chisqstatic constant kFbkgnd = 0static constant kFAmpl = 1static constant kFX0 = 2static constant kFSigX= 3static constant kFY0 = 4static constant kFSigY = 5static constant kFCorr = 6static constant kFChisqG = 7//static constant kfitrange  = 20   //+- range for fitting in pixels//*****************************************// ExamineFitG1post()// examines one post for a set of images// automatically prints// 3/7/06  Notebook capability addedfunction ExamineFitG1post(npost,f1,f2,printflag,notebookflag,maskwave,fitdata,fiterrors,astrwave)   variable npost  // == post number.  Set to -1 to do all posts   variable f1,f2  	// beginning and ending file numbers   variable printflag  //That has been added to Dan's program   variable notebookflag  //Added by DHR 3/7/06   wave maskwave   wave fitdata   wave fiterrors   wave astrwave      SVAR RootString       variable ifile    string nbname = ""if (notebookflag == 1)     sprintf NBname, "NBExamG_"+RootString+"P"+"%d", npost    DoWindow/K $NBname    NewNotebook/F=1/N=$NBnameendiffor (ifile=f1; ifile <=f2; ifile +=1)   // loop over raw data files    ExamineFitG1post1image(npost,ifile,printflag,notebookflag,NBname,maskwave,fitdata,fiterrors,astrwave)endforend//****************************************//  ExamineFitG1post1image()//  Examines G fit for a single post in one imagefunction ExamineFitG1post1image(npost,imagenum,printflag,notebookflag,NBname,maskwave,fitdata,fiterrors,astrwave)   variable npost  // == post number.  Set to -1 to do all posts   variable imagenum  // number of image to be looked at    variable printflag   // set = 1 to print FitCheck Layout to default printer   variable notebookflag  //Added by DHR 3/7/06   string NBname   wave maskwave   wave fitdata   wave fiterrors   wave astrwavestring s1,s2string s00,s01,s02,s03,s04,s05,s06,s07,s08,s09variable i, j, ifile,icount,posttypevariable xcenter, ycenter,xtopctr,ytopctr//wave pdata,pfit,pdiffSVAR rootstringNVAR kfitrangevariable dX=astrwave[5]variable  dY=astrwave[5] // Distance between posts in horizontal/vertical dimensionvariable AngleOfRotation = astrwave[2]variable XTop=astrwave[0]  // Coordinates of the top left  post in ROIvariable  YTop = astrwave[1] variable XPosts=astrwave[3]//Number of posts in horizontal/vertical dimensionvariable  YPosts=astrwave[4] make/O/N=(2*kfitrange + 1) xcut,ycut,xcutfit,ycutfit   NVAR InputMovieID_G, NmovieFrames_G   //12/10/13   WAVE M_MovieFrame,M_rgb2gray   PlayMovieAction setFrontMovie = inputmovieID_G   PlayMovieAction stop, frame = imagenum                // go to first frame to be analyzed   PlayMovieAction extract   ImageTransform rgb2gray M_MovieFrame   // convert to grayscale in M_rgb2gray   Duplicate/O M_rgb2gray Image1//   sprintf s1, "%s%03d.tif", ksRhodFileRoot,imagenum   // 4/3/07 CL uncomment comment aboveline//    ImageLoad/P=MovieFolder/T=tiff/O/N=image1 s1    // load, copy, and rotate the image        Duplicate/O image1 OrigImage1    ImageRotate/A=(AngleOfRotation) OrigImage1    Duplicate/O M_RotatedImage RotatedOrig1    DoWindow/K RotatedImage    NewImage/K=1/N=RotatedImage RotatedOrig1           //use bandpass to do preprocess   Yu Shi       bpass(30,3, rotatedorig1)       duplicate/o mfinal rotatedorig1       //include smoothing commands from Yu Shi//          MatrixFilter/N=(3)/P=1 max rotatedorig1//	   MatrixFilter/N=(3)/P=1 point rotatedorig1 //         MatrixFilter/N=(3)/P=16 gauss rotatedorig1	//   ModifyImage RotatedOrig1 ctab= {500,800,Grays,0}     // Draw a box      SetDrawLayer ProgFront    SetDrawEnv linefgc= (65535,65535,0),fillpat= 0,xcoord= top,ycoord= left, save     DrawRect XTop - dX/2, YTop - dY/2 ,XTop + (XPosts- 0.5)*dX, YTop +(YPosts- 0.5)*dY   SetAxis left  YTop + YPosts*dY, YTop -dY    SetAxis top XTop - dX, XTop + XPosts*dXicount = 0  for (i=0;i<=(Xposts-1); i+=1)	for (j=0;j<=(YPosts-1); j+=1)        if ((icount == npost))  //Found post of interest;            if (maskwave[i][j] == kIgnore)                printf "ExamineFitG1post(): Post %d is an ignored post\r", icount            else                xcenter = fitdata[icount][kFX0][imagenum]   // center from fit	         ycenter =  fitdata[icount][kFY0][imagenum]                         //copy ROI                duplicate/O/R=(xcenter - kfitrange,xcenter+kfitrange)(ycenter-kfitrange,ycenter+kfitrange) RotatedOrig1, pdata,pfit,pdiff        //Plot fit                pfit = gauss2dfromfit(x,y,icount,Imagenum,fitdata)                             pdiff = pdiff - pfit + 100                        DoWindow/K pdataP                DoWindow/K pfitP                DoWindow/K pdiffP                NewImage/K=1/N=pdataP pdata                NewImage/K=1/N=pfitP pfit                NewImage/K=1/N=pdiffP pdiff   //   12/10/13             ModifyImage/W=pdataP pdata ctab= {astrwave[6],astrwave[7],Grays,0}     //                ModifyImage/W=pfitP pfit ctab= {astrwave[6],astrwave[7],Grays,0}     //                ModifyImage/W=pdiffP pdiff ctab= {400,600,Grays,0}                           // line cuts - always through center of top of post                xcenter = fitdata[icount][kFX0][imagenum]   // center from fit	         ycenter =  fitdata[icount][kFY0][imagenum]	                        SetScale/I x xcenter - kfitrange,xcenter+kfitrange,"", xcut                SetScale/I x xcenter - kfitrange,xcenter+kfitrange,"", xcutfit                SetScale/I x ycenter - kfitrange,ycenter+kfitrange,"", ycut                SetScale/I x ycenter - kfitrange,ycenter+kfitrange,"", ycutfit                        xcut = RotatedOrig1[x][ycenter]   // take line cuts through center of top of post                ycut = RotatedOrig1[xcenter][x]                  xcutfit = gauss2dfromfit(x,ycenter,icount,Imagenum,fitdata)                ycutfit = gauss2dfromfit(xcenter,x,icount,Imagenum,fitdata)                         DoWindow/K xcutP               DoWindow/K ycutP               display/N=xcutP xcut               ModifyGraph rgb(xcut)=(0,0,17410)               appendtograph xcutfit               sprintf s2, "Post %d\r Pix %d\ry=%g",icount,0,ycenter               TextBox/C/N=text0/A=MC/X=3.95/Y=-30.0 s2               Label bottom "\\Z14x"               display/N=ycutP ycut               ModifyGraph rgb(ycut)=(0,0,17410)                appendtograph ycutfit                sprintf s2, "Post %d\r Pix %d\rx=%g",icount,0,xcenter                TextBox/C/N=text0/A=MC/X=3.95/Y=-30.0  s2                Label bottom "\\Z14y"                     DoWindow/K FitInfoP                display/N = FitInfoP                  sprintf s00, "Bkg  = %g +-%4g\r"  fitdata[icount][kFbkgnd][imagenum], fiterrors[icount][kFbkgnd][imagenum]                sprintf s01, "Amp  = %g +-%4g\r"  fitdata[icount][kFampl][imagenum], fiterrors[icount][kFampl][imagenum]                sprintf s02, "X0   = %g +-%4g\r"  fitdata[icount][kFX0][imagenum], fiterrors[icount][kFX0][imagenum]                sprintf s03, "SigX   = %g +-%4g\r"  fitdata[icount][kFSigX][imagenum], fiterrors[icount][kFSigX][imagenum]                sprintf s04, "Y0 = %g +-%4g\r"  fitdata[icount][kFY0][imagenum], fiterrors[icount][kFY0][imagenum]                sprintf s05, "SigY   = %g +-%4g\r"  fitdata[icount][kFSigY][imagenum], fiterrors[icount][kFSigY][imagenum]                sprintf s06, "Corr = %g +-%4g\r"  fitdata[icount][kFCorr][imagenum], fiterrors[icount][kFCorr][imagenum]                sprintf s07, "Chi Sqr    = %g\r"  fitdata[icount][kFChisqG][imagenum]        //                sprintf s2,"%s\rFit Params - Post %d\r%s%s%s%s%s%s%s%s" FitBottom,icount,s00,s01,s02,s03,s04,s05,s06,s07                sprintf s2,"%s - Image %d\rFit Params - Post %d\r%s%s%s%s%s%s%s%s" rootstring,imagenum,icount,s00,s01,s02,s03,s04,s05,s06,s07                TextBox/C/N=text0/A=MC/X=3.95/Y=-10.0  s2                DoWindow/K FitCheck                NewLayout/N=FitCheck                AppendLayoutObject/R=(41,21,280,260) graph pdataP                AppendLayoutObject/R=(321,21,560,260)  graph pfitP                AppendLayoutObject/R=(41,266,280,505) graph pdiffP                AppendLayoutObject/R=(321,266,560,505)  graph xcutP                AppendLayoutObject/R=(41,511,280,750) graph ycutP                AppendLayoutObject/R=(321,511,560,750) graph FitInfoP                if (printflag == 1)                    PrintLayout FitCheck                 endif                 if (notebookflag == 1)                     Notebook $NBname scaling = {90,90}, picture = {FitCheck, -1,1}                     Notebook $NBname text = "\r"                 endif             endif         endif        icount = icount + 1       endfor  endforend//*************************************function gauss2dfromfit(x,y,npost,Imagenum,fitdata)  variable x,y,npost,Imagenum wave fitdata  variable bkgnd,A,X0,sx,Y0,sy,cor,val  bkgnd = fitdata[npost][kFBkgnd][Imagenum] A = fitdata[npost][kFAmpl][Imagenum] X0 = fitdata[npost][kFX0][Imagenum] sx = fitdata[npost][kFSigX][Imagenum] Y0 = fitdata[npost][kFY0][Imagenum] sy = fitdata[npost][kFSigY][Imagenum] cor = fitdata[npost][kFCorr][Imagenum]  val = bkgnd + A*exp( (-1/(2*(1-cor^2)))*( ((x-X0)/sx)^2 + ((y-Y0)/sy)^2 - 2*cor*(x-X0)*(y-Y0)/(sx*sy) ) ) return valend// saves fitresults and fiterrors, presumably after updates from re-fitsfunction SaveGfit()	SVAR FitRes_String, FitErr_String 	wave FRS,  FRS_Err		Duplicate/O FRS $FitRes_String	Duplicate/O FRS_Err $FitErr_String	Save/O/P=ToPractice $FitRes_String as FitRes_String+".ibw"		Save/O/P=ToPractice $FitErr_String as FitErr_String+".ibw"	end  
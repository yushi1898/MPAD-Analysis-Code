#pragma rtGlobals=1		// Use modern global access method.// MODIFICATION HISTORY --  THIS MUST BE UPDATED TO SUMMARIZE CHANGES//9/16/21  DHR modified to work in Igor 9.  Uses modern hook fns// 12/11/08   Routines needed for Making Mask added//12/5/08  modified for Lower left point// 8/28/08  Adapted from PairTrapAnalysisCode// maskwave constantsstatic constant kEmpty = 0static constant kCell = 1static constant kGuide = 2static constant kIgnore = 3static constant kWirepost = 4static constant kFitAll = -1static constant kInterp = 5     // 5/24/06  new constant interp base fit//------------------ DoNothingHook-------------------// 4/7/08//  dummy hook routine for adding cellsfunction DoNothingHook(s)    string s    return 0end//----------------------- MoveLRPointsDraw() -----------------------// 9/14/21  - DHR//  Activates drawing tools on image of posts.  User should  use rectangle tool to draw a rectangular ROI.//  It can then be modified with the cursor tool.// if a rectangle exists it can also be modified.function MoveLRPointsDraw(CtrlName): ButtonControl    string CtrlName    WAVE XT,YT   // where ROI boundaries stored    showtools/w=Step1    SetDrawLayer/w=Step1 ProgFront    SetDrawEnv/w=Step1 fillpat=0    Button MoveLeftRightPoints, title = "Done Drawing", proc = AcceptRectROI end//-------AcceptRectROI ----//9/14/21 DHR   // Finds UL and LR corners of rectangle drawn in calling routine.  Passes these back to Control Panel// Makes an ROI mask from rectangle and then runs ImageAnalyzeParticles stats to find boundaries of // "inscribing rectangle" which is just the original rectangle.function AcceptRectROI(ctrlname):buttoncontrol    string ctrlname        WAVE XT,YT   // where ROI boundaries stored    Hidetools/w =Step1    ImageGenerateROIMask/E=255/I=0/w=Step1 Step1Image  // set up for imageanalyzeparticles    wave M_roimask    // find boundaries of rectangle     ImageAnalyzeParticles stats M_roimask    WAVE W_xmin;  WAVE W_xmax; WAVE W_ymin; WAVE W_ymax // these specify an inscribing rectangle which is the ROI for a rectanglar ROI    if (dimsize(W_xmin,0) == 1)        XT[0] = w_xmin[0]  // there should only be one particle; pass values back to panel variables     	  YT[0] = w_ymin[0]	     XT[1] = w_xmax[0]	     YT[1] = w_ymin[0]	     XT[2] = w_xmin[0]	     YT[2] = w_ymax[0]	     XT[3] = w_xmax[0]	     YT[3] = w_ymax[0]    else  // too many things drawn        print  "Make sure only one rectangle is drawn!"    endif    KillWaves/Z M_roimask                   Button MoveLeftRightPoints,proc=MoveLRPoints,title="Draw Rectangular ROI"end//----------------------- MoveLRPointsSAVED() -----------------------// 4/7/08//  moves multiple points via mouse clicksfunction MoveLRPointsSAVED(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   variable/G InMove = 0   variable/G nbest   if (ActiveTempPoint1 != -1)       print "Error in MoveMulti:  Cursor already active\r"   else         ActiveTempPoint1 = 1 // set it to some positive value       Button MoveLeftRightPoints, title = "Done Moving", proc = AcceptMoveMulti // was AcceptCursor0       DoWindow/F Step1       SetWindow Step1, hook = MoveMultipleCellsHook, hookevents = 3 , hookcursor = 15   endifend//------------------ MoveMultipleCellsHook-------------------// 4/7/08//  hook routine for moving left and right pointsfunction MoveMultipleCellsHook(s)    string s    NVAR InMove    WAVE XT,YT    Variable xpix,ypix,xaxval,yaxval,xwsize,distbest,dist,i    Variable nbest   // make local 9/16/21        if ( StrSearch(s,"EVENT:mousedown;",0) > 0 )        xpix= NumberByKey("MOUSEX",s)        ypix= NumberByKey("MOUSEY",s)        xaxval= AxisValFromPixel("","bottom",xpix)        yaxval= AxisValFromPixel("","left",ypix)	 if (InMove == 0)// find closest point			     nbest = 0	     distbest = 1e8	     for (i = 0; i < dimsize(XT,0); i+=1)  // dimsize added 12/5/08	         dist = sqrt((xaxval - XT[i])^2 + (yaxval - YT[i])^2)		  if (dist < distbest)  // avoid deleted temp cells                   distbest = dist		      nbest = i		 endif            endfor	     XT[nbest] = -1	     YT[nbest] = -1	     InMove = 1	     SetWindow Step1,hookcursor= 0       else    // re-place point	     XT[nbest] =  xaxval	     YT[nbest] = yaxval	     InMove = 0	     SetWindow Step1,hookcursor= 15       endif		      	return 1		// don't do normal processing    endif    return 0end//----------------------AccepMoveMulti() -------------------------// 4/7/08//  finishes moving of multiple cells via DAPI window via mouse clicksfunction AcceptMoveMulti(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   if (ActiveTempPoint1 == -1)       print "Error in AcceptMoveMulti:  Cursor not active\r"   else         ActiveTempPoint1 = -1  // set it to inactive value       Button MoveLeftRightPoints, title = "Move Points", proc = MoveLRPoints // was AcceptCursor0       DoWindow/F Step1//       SetWindow Step1, hook = DoNothingHook, hookevents = 3, hookcursor = 0       GetMarquee/W=Step1 top, left       if(V_flag ==0)           print "No Marquee"       else           printf "V_left = %g   V_right = % g  V_top = %g  V_bottom = %g \r " V_left ,  V_right ,  V_top ,  V_bottom       endif       //       DoWindow/F ITP   endifend// ----------- THIS NEXT SECTION CONTAINS ROUTINES FOR GUI MASK MAKING ROUTINES//----------------------- AddEmptyPost() -----------------------// 9/16/21 DHR updated to work in Igor 9// 12/11/08//  Converts posts to Empty via mouse clicksfunction AddEmptyPost(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   NVAR ValueToAdd  // type of post to addd to maskwave   if (ActiveTempPoint1 != -1)       print " AddEmptyPost:  Cursor already active\r"   else         ActiveTempPoint1 = 1 // set it to some positive value       ValueToAdd = kEmpty       Button AddEmpty, title = "Done Adding", proc = AcceptEmpties // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook(ClickHook) = AddPostsHookI9  // install window hook   endifend//----------------------- AddMagPost() -----------------------// 9/16/21 DHR updated to work in Igor 9// 12/11/08//  Converts posts to Cell via mouse clicks //added by CMK still counts them as 0's, but indicates they are  magfunction AddMagPost(CtrlName): ButtonControl //added by CMK    string CtrlName   NVAR ActiveTempPoint1   NVAR ValueToAdd  // type of post to addd to maskwave   if (ActiveTempPoint1 != -1)       print " AddCellPost:  Cursor already active\r"   else         ActiveTempPoint1 = 1 // set it to some positive value       ValueToAdd = kWirePost       Button AddMag, title = "Done Adding", proc = AcceptMags // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook(ClickHook) = AddPostsHookI9  // install window hook   endifend//----------------------- AddCellPost() -----------------------// 9/16/21 DHR updated to work in Igor 9//  Converts posts to Cell via mouse clicksfunction AddCellPost(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   NVAR ValueToAdd  // type of post to addd to maskwave   if (ActiveTempPoint1 != -1)       print " AddCellPost:  Cursor already active\r"   else         ActiveTempPoint1 = 1 // set it to some positive value       ValueToAdd = kCell       Button AddCell, title = "Done Adding", proc = AcceptCells // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook(ClickHook) = AddPostsHookI9  // install window hook   endifend//----------------------- AddGuidePost() -----------------------// 9/16/21 DHR updated to work in Igor 9// 12/11/08//  Converts posts to Guide via mouse clicksfunction AddGuidePost(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   NVAR ValueToAdd  // type of post to addd to maskwave   if (ActiveTempPoint1 != -1)       print " AddGuidePost:  Cursor already active\r"   else         ActiveTempPoint1 = 1 // set it to some positive value       ValueToAdd = kGuide       Button AddGuide, title = "Done Adding", proc = AcceptGuides // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook(ClickHook) = AddPostsHookI9  // install window hook   endifend//----------------------- AddIgnorePost() -----------------------// 9/16/21 DHR updated to work in Igor 9//  12/11/08 Converts posts to Ignore via mouse clicksfunction AddIgnorePost(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   NVAR ValueToAdd  // type of post to addd to maskwave   if (ActiveTempPoint1 != -1)       print " AddIgnorePost:  Cursor already active\r"   else         ActiveTempPoint1 = 1 // set it to some positive value       ValueToAdd = kIgnore       Button AddIgnore, title = "Done Adding", proc = AcceptIgnores // set control panel button       DoWindow/F MaskMaker       SetWindow MaskMaker, hook(ClickHook) = AddPostsHookI9  // install window hook   endifend//------------------ AddPostsHookI9-------------------// 9/16/21  DHR updated for Igor 9//4/7/08//  hook routine for adding (or actually converting) a post to a new typeFunction AddPostsHookI9(s)	STRUCT WMWinHookStruct &s		Variable hookResult = 0	// 0 if we do not handle event, 1 if we handle it.   NVAR ValueToAdd   WAVE LinMaskX, LinMaskY,LinMaskVal   Variable xpix,ypix,xaxval,yaxval,xwsize,distbest,dist,i   Variable nbest   // make local 9/16/21	switch(s.eventCode)		case 5:  // mouse up  (works on click and release          xpix = s.mouseloc.h   // mouse position in window in pixels          ypix= s.mouseloc.v          xaxval= AxisValFromPixel("","bottom",xpix)  // location in image (also in pixels)          yaxval= AxisValFromPixel("","left",ypix)		    // find closest point			       nbest = 0	       distbest = 1e8	       for (i = 0; i < dimsize(LinMaskX,0); i+=1)  // dimsize added 12/5/08	           dist = sqrt((xaxval -LinMaskX[i])^2 + (yaxval - LinMaskY[i])^2)              if (dist < distbest)                    distbest = dist		            nbest = i              endif          endfor	     // Write new post type	       if ((LinMaskVal[nbest] == kIgnore) && (ValueToAdd == kIgnore))	       //special case: if adding ignored posts and you click an already ignored post,	       // set it to empty  (this is to deal with frequent "misses" when adding ignored posts)	           LinMaskVal[nbest] = kEmpty  	           	       elseif ((LinMaskVal[nbest] == kCell) && (ValueToAdd == kCell))	       //special case: if adding cell posts and you click an existing cell post,	       // set it to empty  (this is to deal any "misses" when adding cell posts)	           LinMaskVal[nbest] = kEmpty  	       else	       // default case: set clicked post to desired value	           LinMaskVal[nbest] = ValueToAdd	       endif	 		    hookResult = 1		    break	endswitch	return hookResult	// If non-zero, we handled event and Igor will ignore it.End//------------------ SelectPostsHook-------------------// 4/7/08//  hook routine for selecting a post for inspectionfunction SelectPostsHook(s)    string s    NVAR nbest   WAVE LinMaskX, LinMaskY,LinMaskVal    Variable xpix,ypix,xaxval,yaxval,xwsize,distbest,dist,i    if ( StrSearch(s,"EVENT:mousedown;",0) > 0 )        xpix= NumberByKey("MOUSEX",s)        ypix= NumberByKey("MOUSEY",s)        xaxval= AxisValFromPixel("","bottom",xpix)        yaxval= AxisValFromPixel("","left",ypix)// find closest point			 nbest = 0	 distbest = 1e8	 for (i = 0; i < dimsize(LinMaskX,0); i+=1)  // dimsize added 12/5/08	     dist = sqrt((xaxval -LinMaskX[i])^2 + (yaxval - LinMaskY[i])^2)            if (dist < distbest)                 distbest = dist		  nbest = i            endif        endfor	     // Write new post type	 	 SetWindow ExamineFit,hookcursor= 0      	return 1		// don't do normal processing    endif    return 0end//----------------------- InspectPost() -----------------------// 2/12/09//  Allows GUI inspection of fitsfunction InspectPost(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1      if (ActiveTempPoint1 != -1)       print " AddIgnorePost:  Cursor already active\r"   else         ActiveTempPoint1 = 1 // set it to some positive value             Button InspectThisPost, title = "Done Selecting", proc = ExaminePost // was AcceptCursor0       DoWindow/F ExamineFit       SetWindow ExamineFit, hook = SelectPostsHook, hookevents = 3, hookcursor = 15   endifend//----------------------AcceptEmpties() -------------------------// 12/11/08//  finishes adding empty posts//  9/16/21  updated for Igor 9function AcceptEmpties(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   if (ActiveTempPoint1 == -1)       print "Error in AcceptEmpties:  Cursor not active\r"   else         ActiveTempPoint1 = -1  // set it to inactive value       Button AddEmpty, title = "Add Empty Posts", proc = AddEmptyPost // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook = $""  // cancels the active hook.       DoWindow/F  SetMaskPanel   endifend//----------------------AcceptMags() -------------------------// 12/11/08//  finishes adding cell posts//  9/16/21  updated for Igor 9function AcceptMags(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   if (ActiveTempPoint1 == -1)       print "Error in AcceptCells:  Cursor not active\r"   else         ActiveTempPoint1 = -1  // set it to inactive value       Button AddMag, title = "Add Mag Posts", proc = AddMagPost // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook = $""       DoWindow/F  SetMaskPanel   endifend//----------------------AcceptCells() -------------------------// 12/11/08//  finishes adding cell posts//  9/16/21  updated for Igor 9function AcceptCells(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   if (ActiveTempPoint1 == -1)       print "Error in AcceptCells:  Cursor not active\r"   else         ActiveTempPoint1 = -1  // set it to inactive value       Button AddCell, title = "Add Cell Posts", proc = AddCellPost // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook = $""       DoWindow/F  SetMaskPanel   endifend//----------------------AcceptGuides() -------------------------// 12/11/08//  finishes adding guide posts//  9/16/21  updated for Igor 9function AcceptGuides(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   if (ActiveTempPoint1 == -1)       print "Error in AcceptGuides:  Cursor not active\r"   else         ActiveTempPoint1 = -1  // set it to inactive value       Button AddGuide, title = "Add Guide Posts", proc = AddGuidePost // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook = $""       DoWindow/F  SetMaskPanel   endifend//----------------------AcceptIgnores() -------------------------// // 12/11/08 finishes adding empty posts//  9/16/21  updated for Igor 9function AcceptIgnores(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   if (ActiveTempPoint1 == -1)       print "Error in AcceptIgnores:  Cursor not active\r"   else         ActiveTempPoint1 = -1  // set it to inactive value       Button AddIgnore, title = "Add Ignored Posts", proc = AddIgnorePost // was AcceptCursor0       DoWindow/F MaskMaker       SetWindow MaskMaker, hook = $""       DoWindow/F  SetMaskPanel   endifend//----------------------ExaminePost() -------------------------function ExaminePost(CtrlName): ButtonControl    string CtrlName   NVAR ActiveTempPoint1   if (ActiveTempPoint1 == -1)       print "Error in AcceptIgnores:  Cursor not active\r"   else         ActiveTempPoint1 = -1  // set it to inactive value       Button InspectPost, title = "SelectPost", proc = InspectPost // was AcceptCursor0       DoWindow/F ExamineFit       SetWindow ExamineFit, hook = DoNothingHook, hookevents = 3, hookcursor = 0       DoWindow/F ExamineFitPanel   endifend
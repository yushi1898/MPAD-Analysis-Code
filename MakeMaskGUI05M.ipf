#pragma rtGlobals=1		// Use modern global access method.// *************MODIFICATION HISTORY  - EFFECTIVE MAY 19, 2006//   Rules:   List any procedure files that are changed  - noting the date of the change//                Details on the changes should be given in the procedure file itself.//                The changes should be listed at the top of the file (date stamped) and also noted at the point of change in the code//12/5/21   removed "edit" that gives error when killwaves happens in done//          Remove 2-mask buttons and plot force//9/16/21   Modified by YS/DHR to remove rhodorphase button// delete rhodorphase() procedure//  NOTE: should get rid of obsolete Rhodorphase stuff throughout - only looking at phase images//6/13/15  minor adjustment made for showindices//12/10/13 - modified for movie data - these are phase (or whitelight) only, so as a quick patch// make the "Rhod" image the same as the "phase" image in MakeMaskGuiM// 12/15/2011 Craig added FillMask etc to allow drawing a polygon around the cell and filling it in with cell posts// 12/11/08   File-reads are 3-digit name compliant// maskwave constantsstatic constant kEmpty = 0static constant kCell = 1static constant kGuide = 2static constant kIgnore = 3static constant kWirepost = 4static constant kFitAll = -1static constant kInterp = 5     // 5/24/06  new constant interp base fit// indices of Shiftwave// note that primary index of Shiftwave must correspond to file numberstatic constant kiXc = 0   // 4/15/07  Xcstatic constant kiYc = 1  // Ycstatic constant kisigXc = 2  // sigXcstatic constant kisigYc = 3  // sigXystatic constant kiTheta = 4  // shift anglestatic constant kisigXsf = 5   // 6/28/06 for errorstatic constant kisigYsf = 6   static constant kiAngle = 7static constant kiA = 8static constant kiB = 9static constant kiXsi  =10static constant kiYsi = 11static constant kiXsf = 12static constant kiYsf =13static strconstant  ksRhodFileRoot = "RHOD"  // file-reads in this ipf are 3-digit complianestatic strconstant  ksPhaseFileRoot = "Ph"  // file-reads in this ipf are 3-digit compliane// ---------        MakeMaskGUIM()  ---------//12/10/13 - modified for movie data - these are phase (or whitelight) only, so as a quick patch// make the "Rhod" image the same as the "phase" image in MakeMaskGuiM// 12/5/08 Based on InspectAndUpdateOneFrameV3function  MakeMaskGUIM(ctrlName): ButtonControl    string ctrlName    // temporary storage variables    //make/O/N= (3) XT, YT //don't need 3, but for consistency with define array (so I can have it repeat values)        SVAR RootString, MaskString, AttributeString    SVAR ShiftString    variable i,j    string s1    variable/G  RhodOrPhaseFlg = 0    // == 0 for rhod, 1 for phase    variable/G  ShowMaskFlg = 1        // = 1 to show mask,  0 to hide    variable/G ValueToAdd  // type of post to addd to maskwave - used in AddPost routines    NVAR ActiveTempPoint1      ActiveTempPoint1 = -1        Variable f1=0    Prompt f1, "Enter  File Index"    DoPrompt "Pick file to set mask", f1    if (V_flag==1)	      	return 0    endif        LoadWave/O/P=ToPractice AttributeString+".ibw"    LoadWave/O/P=ToPractice ShiftString+".ibw"    Duplicate/O $AttributeString ASTr    Duplicate/O $ShiftString ShiftW    Variable RAngle=ASTr[2]    variable Xposts = ASTr[3]    variable Yposts = ASTr[4]    if (WaveExists($MaskString) == 1)        duplicate/O $MaskString TempMask//12/5/21        edit tempmask    else        Make/O/N=(Xposts,Yposts) TempMask        TempMask = kEmpty     // or do you want empty?    endif                // initialize waves for plotting mask points    MakeLinearMaskWaves()            // new 12/10/13 for movie input       NVAR InputMovieID_G, NmovieFrames_G   //12/10/13       PlayMovieAction setFrontMovie = inputmovieID_G       playmovieaction frame=f1, extract       WAVE M_MovieFrame       ImageTransform rgb2gray M_MovieFrame   // convert to grayscale in M_rgb2gray       WAVE M_rgb2gray       Duplicate/O M_rgb2gray, image1    ImageRotate/A=(ASTr[2]) image1   // Rangle    WAVE M_RotatedImage        Duplicate/O M_RotatedImage imageRhod, imagePhase  // fake things by making Rhod and Phase image identical    plotmask()   // plot rhod image with mask superimposed// create and start using control panel for setting mask    DoWindow/K SetMaskPanel    NewPanel/K=1/N=SetMaskPanel/W=(700,50,1200,350)  // 6/12/08    string/G iuTitlestr// coordinates in control panel  for array of buttons B1-B4 on row# and line#    variable line1 = 10; variable line2 = 60; variable line3 = 120; variable line4 = 150;    variable line5=200; variable updateline=260;     variable lastline = 240    variable B1pos = 30; variable B2pos = 190; variable B3pos = 350; variable B4pos = 510		Execute "ModifyPanel cbRGB=(56797,56797,56797)"	sprintf iuTitlestr "Current frame %d  ", f1	TitleBox iuTitle,title=iuTitleStr,pos={50,line1}       Button FillMask, pos={B1pos, line2},size={130,20},title="Draw Cell Outline", proc=CellOutline       Button ShowHideMask, pos = {B2pos, line2}, size = {100,20}, title = "Hide Mask", proc = ShowHideMaskProc       Button RePlot, pos = {B3pos, line2}, size = {100,20}, title = "Re-plot", proc =RePlot              Button AddIgnore, pos = {B1pos, line3}, size = {130,20}, title = "Add Ignored Posts", proc = AddIgnorePost       Button AddEmpty, pos = {B2pos, line3}, size = {130,20}, title = "Add Empty Posts", proc = AddEmptyPost       Button AddCell, pos = {B3pos, line3}, size = {130,20}, title = "Add Cell Posts", proc = AddCellPost  //     Button AddMag, pos= {B3pos, line3}, size = {130,20},title = "Add Magnetic Posts", proc= AddMagPost //Added by CMK 1-13-09//       Button AddGuide, pos = {B1pos, line4}, size = {130,20}, title = "Add Guide Posts", proc = AddGuidePost// 12/5/21      Button ClearMask,pos={B1pos,line4},size={130,20},title="Clear 2 cell mask",proc=ClearMask//       Button LoadTwoCellMask,pos={B2pos,line4},size={130,20},title="Load 2 cell mask",proc=LoadTwoCellMask//       Button FlipMask, pos={B3pos,line4},size={130,20},title = "Flip 2 cell mask",proc=Flipmask      Button ResetMask pos = {B1pos, line5}, size={100,20}, title = "Reset Mask", proc = ResetMaskProc//12/5/21       Button ShowVectors, pos={B2pos,line5},size={130,20},title="Show Force Vectors", proc=ShowVectors       Button ShowIndex, pos={B2pos, line5}, size={100,20},title = "Show Index", proc= ShowIndex             Button DoneButtonMask, pos={B1pos,250}, size ={100,20},title = "Done", proc = DoneButtonMask1              PauseForUser SetMaskPanel, MaskMaker end//--------------------- Replot -----------------//replots whole image Function RePlot(ctrlName) : ButtonControl  //Done Button     string ctrlName        DoWindow/K MaskMaker    PlotMask()end//--------------------- Show Index -----------------//added by CMK 1-13-09 to show indexFunction ShowIndex(ctrlName):ButtonControlstring ctrlname      ShowIndices(2.4,0)end//--------------------- ShowHideMaskProc-----------------// switches between showing or hiding mask// reads current state  of plot and switchesFunction ShowHideMaskProc(ctrlName) : ButtonControl  //Done Button     string ctrlName    NVAR  ShowMaskFlg         // = 1 to show mask,  0 to hide    WAVE  LinMaskX, LinMaskY,LinMaskVal       NVAR ActiveTempPoint1   if (ActiveTempPoint1 != -1)       print " ShowHideMaskProc:  Cursor already active\r"   else        DoWindow/F  MaskMaker      if (ShowMaskFlg == 1)   // Mask is showing - hide it        RemoveFromGraph LinMaskY                ShowMaskFlg = 0        DoWindow/F SetMaskPanel        Button ShowHideMask,  title = "Show Mask"  // set up for next call      else                                   // Mask not showing - show it        appendtograph/T linmasky vs linmaskx        ModifyGraph mode=3,marker=0        ModifyGraph zmrkNum(LinMaskY)={LinMaskVal}        ModifyGraph zColor(LinMaskY)={LinMaskVal,0,3,Rainbow,0}        DoUpdate        ShowMaskFlg = 1        DoWindow/F SetMaskPanel        Button ShowHideMask,  title = "Hide Mask"  // set up for next call      endif    endifend  // -------------------- PlotMask() -------------------// 12/11/08  plots one image (rhod or phase) with mask superimposedFunction PlotMask()        NVAR  RhodOrPhaseFlg  // == 0 for rhod, 1 for phase    NVAR ShowMaskFlg         // = 1 to show mask,  0 to hide    WAVE imageRhod, imagePhase    WAVE LinMaskX, LinMaskY,LinMaskVal        DoWindow/K MaskMaker    if (RhodOrPhaseFlg == 0)        NewImage/N=MaskMaker imageRhod        //**********5/4/12*******Craig added, this modified image is helpful for defining cell outline******        NVAR  IntenseLowVar, IntenseHighVar        ModifyImage imagerhod ctab= {IntenseLowVar, IntenseHighVar,Grays,0}        //***************************************************************************    else        NewImage/N=MaskMaker imagePhase    endif    if (ShowMaskFlg == 1)        appendtograph/T linmasky vs linmaskx       ModifyGraph mode=3,marker=0            ModifyGraph zmrkNum(LinMaskY)={LinMaskVal}        ModifyGraph zColor(LinMaskY)={LinMaskVal,0,3,Rainbow,0}        DoUpdate    endifend// -------------------- ShowIndices() -------------------// 12/11/08  plots one image (rhod or phase) with mask superimposedFunction ShowIndices(fontsize,ifile)        variable fontsize,ifile    NVAR  RhodOrPhaseFlg  // == 0 for rhod, 1 for phase    NVAR ShowMaskFlg         // = 1 to show mask,  0 to hide    WAVE imageRhod, imagePhase    WAVE LinMaskX, LinMaskY,LinMaskVal //using same method, but different wave, so the original linmask can be maintained    wave FitResults    wave shiftwave        variable k, kmax    kmax = dimsize(LinMaskY,0)        make/o/n=(kmax) indexwave              for(k=0;k<kmax;k+=1)        indexwave[k] = k            endfor    //edit indexwave    DoWindow/K MaskMaker    if (RhodOrPhaseFlg == 0)        NewImage/N=MaskMaker/s=1 imageRhod    else        NewImage/N=MaskMaker/s=1 imagePhase    endif    if (ShowMaskFlg == 1)  //      linmasky=fitresults[p][1][ifile]  //      linmaskx=fitresults[p][0][ifile]        appendtograph/T linmasky vs linmaskx        ModifyGraph mode(LinMaskY)=3, msize = fontsize        modifygraph zcolormax=NAN        //ModifyGraph zmrkNum(LinMaskY)={LinMaskVal}        ModifyGraph zColor(LinMaskY)={LinMaskVal,0,3,blue,0}        ModifyGraph textMarker(LinMaskY)={indexwave,"default",1,0,5,0.00,0.00}        string filelabel        sprintf filelabel "Frame # %d", ifile        textbox/n=text /k        textbox/c/n=text /A  = RB /n=text0/B = 0 /F= 0 /G =(0,0,0) filelabel         DoUpdate    endif  //  dowindow/k indexwaveend//-------------------- MakeLinearMaskWaves() ----------// for hex arraysFunction MakeLinearMaskWaves()    SVAR RootString, MaskString, AttributeString    SVAR ShiftString    variable i,j,Xoffset        wave xt2, yt2 //duplicates of the initial 3 locations used in roiselect, here used to determine angles   WAVE ASTr   WAVE ShiftW   WAVE TempMask    variable x0 = ASTr[0]    variable y0 = ASTr[1]    variable Xposts = ASTr[3]    variable Yposts = ASTr[4]    variable Alat1 =  ShiftW[0][kiA]      variable Blat1 = ShiftW[0][kiB]     nvar hexcp    print hexcp     variable slopey =  0//specific for a distorted image, in a perfect array this will be 0 10/15/08    variable slopex = 0            if(hexcp ==1)   	 if(mod(yposts,2)==0)     	 	slopey =  (XT2[2]-0.5*Alat1-XT2[0])/(YT2[2]-YT2[0])    	 else    		slopey =  (XT2[2]-XT2[0])/(YT2[2]-YT2[0])   	 endif     else     	slopey =  (XT2[2]-XT2[0])/(YT2[2]-YT2[0])     endif     	slopex = (YT2[1]-YT2[0])/(XT2[1]-XT2[0])        print "slopex = ", slopex        Make/O/N=(Xposts*Yposts) LinMaskX, LinMaskY,LinMaskVal    for (i = 0; i < Xposts; i+=1)        for (j = 0; j < Yposts; j+=1)                        If(hexcp ==1)            		Xoffset = mod(j,2) *0.5 * Alat1   // offset odd rows by 1/2 lattice constant in x            else            		xoffset = 0            	endif            LinMaskX[i*Yposts + j] = x0 + i*Alat1 + Xoffset+j*Alat1*slopey            LinMaskY[i*Yposts + j] = y0 + j*Blat1 + i *Blat1*slopex            LinMaskVal[i*Yposts + j] = TempMask[i][j]        endfor    endfor    //*************************    Duplicate/o linmaskx linmaskxorig    Duplicate/o linmasky linmaskyorig    //*************************end//---------------------ResetMaskProc ------------------//12/11/08  Resets temporary mask to all background (empty) postsFunction ResetMaskProc(ctrlName) : ButtonControl  string ctrlName    WAVE  LinMaskVal    variable areyousure = 0   NVAR ActiveTempPoint1   if (ActiveTempPoint1 != -1)       print " ResetMaskProc:  Cursor already active\r"   else         Prompt areyousure "Set = 1 to reset mask"        DoPrompt "Do you really want to reset the mask?" , areyousure        if (areyousure == 1)            LinMaskval = kEmpty        endif    endifend//--------------------- DoneButtonMask1 ------------------//12/5/08Function DoneButtonMask1(ctrlName) : ButtonControl  //Done Button string ctrlName    SVAR RootString, ShiftString,MaskString    WAVE TempMask, LinMaskVal, ASTr        NVAR ifileShiftsG    NVAR ActiveTempPoint1    variable i,j    variable Xposts = ASTr[3]    variable Yposts = ASTr[4]    variable finishanyway = 1    if (ActiveTempPoint1 != -1)   // cursor is active        print "Error in DoneButtonMask1:  Cursor is active\r"        finishanyway = 0        Prompt finishanyway "Set=1 to finish anyway"        DoPrompt "Error in DoneButtonMask1:  Cursor is active", finishanyway    endif   if (finishanyway == 1)	showindices(4,0)       DoWindow/K SetMaskPanel              DoWindow/K MaskMaker // 6/12/08 cleanup       KillWaves/Z imagePhase, ImageRhod       for (i = 0; i < Xposts; i+=1)           for (j = 0; j < Yposts; j+=1)              TempMask[i][j] = LinMaskVal[i*Yposts + j]        endfor    endfor       //  copy back from linearmask to tempmask	DoWindow/K GoodStuff   //12/5/21  moved to here   killwaves/Z $maskstring	Duplicate/O TempMask $MaskString	KillWaves/Z TempMask       edit/N=GoodStuff/K=1 $MaskString	Save/O/C/P=ToPractice $MaskString as (MaskString+".ibw") 	ModifyTable elements($MaskString)=(-3,-2,-1,-1)     endifend// to do// draw rectangle around mask region?//  write linear mask back into tempmask before saving//-------CellOutline-----------//12/8/11 CRAIGFunction CellOutline(ctrlname):buttoncontrolstring ctrlnameMaskfill() //this necessary? or can i put Maskfill()'s contents right here?end//-------MaskFill---------//12/8/11 CraigFunction Maskfill()showtools/w=maskmakerSetDrawLayer/w=maskmaker ProgFrontSetDrawEnv/w=maskmaker fillpat=0Button FillMask, title="Done drawing", proc=acceptoutlineend//----------------------AcceptOutline---------------------//12/8/11 CraigFunction Acceptoutline(ctrlname):buttoncontrol	string ctrlname		variable i, posttype	wave astr	wave youtline,xoutline    	variable totalnumposts = astr[3]*astr[4]    	wave linmaskval,linmaskx,linmasky    	    	Prompt posttype,"What Kind of posts are you making? 0=Empty 1=Cell 2=Guide 3= Ignore"    	DoPrompt "Select Post Type", posttype    	    	    	Hidetools/w= maskmaker      ImageGenerateROIMask/w=maskmaker imagerhod        ImageGenerateROIMask/w=maskmaker imagephase  //include both to draw on either one      wave M_roimask	print v_flag	killwaves youtline,xoutline	for (i = 0; i < totalnumposts; i+=1)//fill linmaskval based on cell mask from outline		if(M_ROImask[(Linmaskx[i])][(linmasky[i])] == 1) //is cell post            	linmaskval[i]=posttype            endif	endfor      Killwaves M_roimask	Button FillMask,title="Draw Cell Outline", proc=CellOutlineend//-----------Show force vectors------------//2/15/12 CraigFunction ShowVectors(ctrlname):Buttoncontrolstring ctrlnamewave makeshiftx,makeshiftyAppendToGraph/T  makeshiftY vs makeshiftX ModifyGraph arrowMarker(makeshiftY)={lengthandangle,1,2+1,2,0}ModifyGraph rgb(makeshiftY)=(65535,0,0)ModifyGraph mode=3,marker=19,msize=2ModifyGraph tick=1,nticks=10,noLabel=0END//------------Flip Mask-----------------//2/15/12 CraigFunction FlipMask(ctrlname):Buttoncontrolstring ctrlnamewave linmaskval,astrvariable totalnumposts = astr[3]*astr[4],ifor(i=0;i<totalnumposts; i+=1)	if(linmaskval[i] == 1)		linmaskval[i] = 2	elseif(linmaskval[i] == 2)		linmaskval[i] = 1	endifendforduplicate/o linmaskval twocellmaskbackupEND//------ClearMask-------//  Craig 2/15/12Function ClearMask(ctrlname):buttoncontrolstring ctrlnamewave linmaskval,astrvariable totalnumposts = astr[3]*astr[4],ifor(i=0;i<totalnumposts; i+=1)	if(linmaskval[i] == 2)		linmaskval[i] = 1	endifendforEND//-------Load 2 cell mask------------//Craig 2/15/12Function LoadTwoCellMask(ctrlname):buttoncontrolstring ctrlnamewave twocellmaskbackup, linmaskvallinmaskval = twocellmaskbackupEND